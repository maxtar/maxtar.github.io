<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>программирование on Max Wiki Site</title><link>https://maxtar.github.io/tags/%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5/</link><description>Recent content in программирование on Max Wiki Site</description><generator>Hugo -- gohugo.io</generator><language>ru-RU</language><lastBuildDate>Mon, 03 Oct 2022 21:37:57 +0300</lastBuildDate><atom:link href="https://maxtar.github.io/tags/%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5/index.xml" rel="self" type="application/rss+xml"/><item><title>GitHub</title><link>https://maxtar.github.io/programming/github/</link><pubDate>Mon, 03 Oct 2022 21:37:57 +0300</pubDate><guid>https://maxtar.github.io/programming/github/</guid><description>Разная информация по работе с GitHub.com
Влить исходный репозиторий в свой форканый Влить исходный репозиторий в свой форканый Информация взята из официальной документации github.
Открыть консоль и перейти в директорию со своим репозиторием.
Переключится, если надо на нужную ветку (обычно master)
git checkout master Выкачать изменения из оригинального репозитория:
git pull https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git BRANCH_NAME Если есть конфликты исправить их.
Закоммитить изменения с результатом слияния
Закачать изменения в свой репозиторий
git push origin master</description></item><item><title>Kotlin</title><link>https://maxtar.github.io/programming/kotlin/</link><pubDate>Sun, 02 Oct 2022 22:21:45 +0300</pubDate><guid>https://maxtar.github.io/programming/kotlin/</guid><description> Информация по Kotlin Добавление поддержки Kotlin в gradle kotlinlang.ru - сайт, посвящённый Kotlin на-русском.</description></item><item><title>Java</title><link>https://maxtar.github.io/programming/java/</link><pubDate>Sun, 02 Oct 2022 22:18:04 +0300</pubDate><guid>https://maxtar.github.io/programming/java/</guid><description>Информация о Java, примеры использования и библиотеки
JVM Liberica - сборка openjdk от BellSoft. Принимают участие в развитии openjdk и вообще всячески лицензированы oracle. GraalVM - позволяет запускать не только java, но и JavaScript, Python, Ruby, R, C, C++. AdoptOpenJDK - ещё одна сборка openjdk. Также есть реализация Openj9 вирутальной машины.</description></item><item><title>Internationalization (i18n) и Localization (l10n) в Go</title><link>https://maxtar.github.io/programming/go/i18n-i10n/</link><pubDate>Sun, 02 Oct 2022 14:59:08 +0300</pubDate><guid>https://maxtar.github.io/programming/go/i18n-i10n/</guid><description>Информация взята отсюда
Альтернативный пакет (https://github.com/nicksnyder/go-i18n).
Internationalization (i18n) Для форматирования вывода информации в национальном формате (например, чисел) используются следующие пакеты:
golang.org/x/text/language golang.org/x/text/message По-умолчанию, они не установлены. Необходимо их скачать:
go get -u golang.org/x/text/language go get -u golang.org/x/text/message Для вывода информации на основании языка используется тип message.Printer. Используется он следующий образом:
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;golang.org/x/text/language&amp;#34; &amp;#34;golang.org/x/text/message&amp;#34; ) func main() { p = message.NewPrinter(language.Russian) p.Printf(&amp;#34;Вы получили %.2f монет.\n&amp;#34;, 16521.56) } Localization (l10n) Для локализации используются те же пакеты.</description></item><item><title>Go</title><link>https://maxtar.github.io/programming/go/</link><pubDate>Sun, 02 Oct 2022 14:02:40 +0300</pubDate><guid>https://maxtar.github.io/programming/go/</guid><description>Различная информация по языку Go Сайт.
Internationalization (i18n) и Localization (l10n) в Go Форматирование даты/времени Основной репозиторий, Зеркало на github.com. Документация по разным библиотекам (GoDoc). Новый сайт с документацией (go.dev). Описание параметров утилиты Go. Gopm Registry реестр разных пакетов go. Можно скачать, если на компьютере не установлены программы версионного контроля. Список архитектур и операционок в которые можно компилировать. Форум. Альтернатива Play Golang. Go Report Card. Сервис проверяющий Go репозиторий на соответствие стандартам.</description></item><item><title>Форматирование даты/времени</title><link>https://maxtar.github.io/programming/go/time-formatting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://maxtar.github.io/programming/go/time-formatting/</guid><description>Format/parse a time or date Информация взята Format/parse a time or date
Метод Format из пакета time.Time для форматирования строки из времени. Функция time.Parse для получения даты из строки. func (t Time) Format(layout string) string func Parse(layout, value string) (Time, error) Пример:
input := &amp;#34;2017-08-31&amp;#34; layout := &amp;#34;2006-01-02&amp;#34; t, _ := time.Parse(layout, input) fmt.Println(t) // 2017-08-31 00:00:00 #0000 UTC fmt.Println(t.Format(&amp;#34;02-Jan-2006&amp;#34;)) // 31-Aug-2017 The layout parameter should be the reference date Mon Jan 2 15:04:05 MST 2006</description></item></channel></rss>